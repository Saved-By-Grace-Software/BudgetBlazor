@using System.ComponentModel;
@using System.ComponentModel.DataAnnotations.Schema;

<MudDialog>
    <DialogActions>

    </DialogActions>
    <DialogContent>
        <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
            <MudGrid Spacing="4" Justify="Justify.SpaceBetween">
                <MudItem sm="12" md="2">
                    <MudDatePicker Label="Transaction Date" @bind-Date="_transactionDateBinder" DisableToolbar="true" PickerClosed="MonthChanged" />
                </MudItem>
                <MudItem sm="12" md="4">
                    <MudTextField @bind-Value="Transaction.Name" Label="Description" Variant="Variant.Outlined" Required="true" RequiredError="Must enter a Transaction description"></MudTextField>
                </MudItem>
                <MudItem sm="12" md="2">
                    <MudTextField @bind-Value="Transaction.Amount" Label="Amount" Variant="Variant.Outlined" Required="true" RequiredError="Must enter a Transaction amount"></MudTextField>
                </MudItem>
                <MudItem sm="12" md="4">
                    <MudSelect T="BudgetItem" @bind-Value="@Transaction.Budget" Label="Budget" AnchorOrigin="Origin.BottomCenter" Required="false" Disabled="@(Transaction.IsIncome || Transaction.IsSplit)">
                        @foreach(BudgetItem budget in parentBudgets)
                        {
                            <MudSelectItem Value="budget" />
                        }
                    </MudSelect>
                </MudItem>
                <MudItem sm="12" md="12">
                    <MudCheckBox @bind-Checked="@Transaction.IsIncome" Label="Is Income?" Disabled="@Transaction.IsSplit"></MudCheckBox>
                    <MudCheckBox @bind-Checked="@Transaction.IsSplit" Label="Split Transaction?" Disabled="@Transaction.IsIncome"></MudCheckBox>
                </MudItem>
                <MudItem sm="12" md="12">
                    <MudExpansionPanels DisableBorders="false" Elevation="2">
                        <MudExpansionPanel Text="Split Information" Disabled="true" IsExpanded="@(Transaction.IsSplit)">
                            @foreach (Transaction t in Transaction.Splits)
                            {
                                <MudGrid Justify="@Justify.SpaceAround">
                                    <MudItem sm="6" md="2">
                                        <MudDatePicker Label="Transaction Date" Date="@t.TransactionDate" DisableToolbar="true" PickerClosed="MonthChanged" />
                                    </MudItem>
                                    <MudItem sm="6" md="4">
                                        <MudTextField @bind-Value="t.Name" Label="Split Name" Variant="Variant.Outlined"></MudTextField>
                                    </MudItem>
                                    <MudItem sm="6" md="2">
                                        <MudTextField @bind-Value="t.Amount" Label="Split Amount" Variant="Variant.Outlined"></MudTextField>
                                    </MudItem>
                                    <MudItem sm="5" md="3">
                                        <MudSelect T="BudgetItem" @bind-Value="@t.Budget" Label="Split Budget" AnchorOrigin="Origin.BottomCenter" Required="false">
                                            @foreach(BudgetItem budget in parentBudgets)
                                            {
                                                <MudSelectItem Value="budget" />
                                            }
                                        </MudSelect>
                                    </MudItem>
                                    <MudItem sm="1" md="1">
                                        <MudIconButton Class="mt-4" Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => DeleteTransactionSplit(t)" />
                                    </MudItem>
                                </MudGrid>
                            }
                            <MudTooltip Text="Add New Split">
                                <MudIconButton Class="mt-4" Icon="@Icons.Material.Filled.Add" Color="Color.Success" Variant="Variant.Outlined" OnClick="AddNewTransactionSplit" />
                            </MudTooltip>
                        </MudExpansionPanel>
                    </MudExpansionPanels>
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Inject] IBudgetDataService BudgetDataService { get; set; }
    [Inject] AuthenticationStateProvider AuthenticationStateProvider { get; set; }
    [Parameter] public Transaction Transaction { get; set; }

    private DateTime? _transactionDateBinder { get; set; }
    private List<BudgetItem> parentBudgets { get; set; }
    private Guid _currentUserId { get; set; }

    MudForm form;
    bool success;
    string[] errors = { };

    /// <summary>
    /// Lifecycle method called when the page is initialized
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        var authstate = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        _currentUserId = Guid.Parse(authstate.User.Claims.First().Value);

        _transactionDateBinder = Transaction.TransactionDate;
        parentBudgets = BudgetDataService.GetBudgetItems(Transaction.TransactionDate.Year, Transaction.TransactionDate.Month, _currentUserId);
    }

    private async Task Submit()
    {
        // Validate the form
        await form.Validate();

        if (form.IsValid)
        {
            // Update the transaction date from the binder
            Transaction.TransactionDate = (DateTime)_transactionDateBinder;

            // Clear the budget if the selected budget is not from the list
            if (!parentBudgets.Contains(Transaction.Budget))
            {
                Transaction.Budget = null;
            }

            // If income, clear the splits and the budget
            if (Transaction.IsIncome)
            {
                Transaction.Budget = null;
                Transaction.Splits.Clear();
            }

            // If split, remove budget from parent and check split budgets
            if (Transaction.IsSplit)
            {
                Transaction.Budget = null;
                foreach (Transaction t in Transaction.Splits)
                {
                    if (!parentBudgets.Contains(t.Budget))
                    {
                        t.Budget = null;
                    }
                }
            }

            // Close the modal and pass back the updated transaction
            MudDialog.Close(Transaction);
        }
    }

    void Cancel() => MudDialog.Cancel();

    /// <summary>
    /// Reloads the budget items for the newly selected month
    /// </summary>
    private void MonthChanged()
    {
        if (((DateTime)_transactionDateBinder).Year != Transaction.TransactionDate.Year || ((DateTime)_transactionDateBinder).Month != Transaction.TransactionDate.Month)
        {
            // The date changed to a new month, reload the budget items
            parentBudgets = BudgetDataService.GetBudgetItems(((DateTime)_transactionDateBinder).Year, ((DateTime)_transactionDateBinder).Month, _currentUserId);
        }

        //parentBudgets = BudgetDataService.GetBudgetItems(((DateTime)_transactionDateBinder).Year, ((DateTime)_transactionDateBinder).Month, _currentUserId);
    }

    /// <summary>
    /// Adds a new split to the transaction splits (does not save to the database here)
    /// </summary>
    /// <returns></returns>
    private async Task AddNewTransactionSplit()
    {
        // Add the transaction to the splits
        Transaction.Splits.Add(new Transaction(Transaction.Name, _currentUserId, Transaction.TransactionDate));
    }

    /// <summary>
    /// Deletes the specified split from the transaction (does not remove it from the database here)
    /// </summary>
    /// <param name="splitToDelete"></param>
    /// <returns></returns>
    private async Task DeleteTransactionSplit(Transaction splitToDelete)
    {
        // Remove the split from the transaction splits
        Transaction.Splits.Remove(splitToDelete);
    }
}