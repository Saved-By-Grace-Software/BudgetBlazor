@using System.ComponentModel;
@using System.ComponentModel.DataAnnotations.Schema;

<MudDialog>
    <DialogContent>
        <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
            <MudGrid Spacing="4" Justify="Justify.SpaceBetween">
                <MudItem sm="12" md="4">
                    <MudTextField @bind-Value="Account.Name" Label="Account Name" Variant="Variant.Outlined" Required="true" RequiredError="Must enter an Account name"></MudTextField>
                </MudItem>
                <MudItem sm="12" md="4">
                    <MudTextField @bind-Value="Account.AccountNumber" Label="Account Number" Variant="Variant.Outlined" Required="false"></MudTextField>
                </MudItem>
                <MudItem sm="12" md="4">
                    <MudSelect T="AccountType" @bind-Value="@Account.AccountType" Label="Account Type" AnchorOrigin="Origin.BottomCenter" Required="true" RequiredError="Must choose an Account type">
                        @foreach(AccountType type in Enum.GetValues(typeof(AccountType)))
                        {
                            <MudSelectItem Value="type" />
                        }
                    </MudSelect>
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public Account Account { get; set; }

    MudForm form;
    bool success;
    string[] errors = { };

    private async Task Submit()
    {
        // Validate the form
        await form.Validate();

        if (form.IsValid)
        {
            // Close the modal and pass back the updated account
            MudDialog.Close(Account);
        }
    }

    void Cancel() => MudDialog.Cancel();
}